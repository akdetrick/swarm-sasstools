/**
* Webpack entry
* ------------------------
* imports all swarm-sasstools modules
* FOR DOCUMENTATION PURPOSES ONLY
*/
/**
* reset/all.scss
* -------------------
*
* Includes:
* - Sass utilities
* - CSS resets for all base tags
* - Heading classes
* - Body text classes
* - Debug classes
*/
/**
* utils/all.scss
* -------------------
* imports all utility partials
* ("silent" Sass only)
*
* *IMPORTANT*
* You do not need to explicitly include this file in your project.
* These utilites are provided by `scss/reset/all.scss`.
*/
/**
* We use a double-stranded
* [modular scale](http://alistapart.com/article/more-meaningful-typography)
* loosely based on a perfect-fifths scale.
*
* ```
* $block   : 48px @ 1:1.5
* $space   : 16px @ 1:1.5
* ```
*/
/**
* "Block" variables contain size values in pixels starting from
* `48px`, moving up the `1:1.5` type scale.
*/
/**
* "Space" variables contain size values in pixels starting from
* `16px`, moving up the `1:1.5` type scale.
*/
/**
* Elements like images, icons, avatars, and illustrations
* can be thought of as "media". The following variables
* set media sizes based on our modular scale:
*/
/*doc
---
title: Programmatic contrast text
name: getPrimaryTextColor
parent: brightness
---
For a given background color, this function returns
a text color value with appropriate contrast.

_returns `color` value_

```
// -> color: $C_textPrimaryInverted; (white text on dark)
color: getPrimaryTextColor(#000);

// -> color: $C_textPrimary; (dark text on white)
color: getPrimaryTextColor(#FFF);
```
*/
.imgFill {
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover; }

.buttonPersonality {
  -webkit-user-select: none;
  -ms-user-select: none;
  user-select: none;
  cursor: pointer;
  text-decoration: none !important; }

ul, ol {
  margin-left: 0;
  padding-left: 0;
  list-style-type: none; }

.text--display,
.text--display1,
.text--display2,
.text--display3 {
  color: rgba(0, 0, 0, 0.87);
  font-weight: 600;
  letter-spacing: -0.02em; }
  .text--display,
  .text--display1, .text--display svg,
  .text--display1 svg,
  .text--display2, .text--display2 svg,
  .text--display3, .text--display3 svg {
    stroke: transparent;
    fill: rgba(0, 0, 0, 0.87); }
  .inverted .text--display, .inverted
  .text--display1,
  .inverted .text--display2,
  .inverted .text--display3 {
    color: white;
    font-weight: 500; }
    .inverted .text--display, .inverted
    .text--display1,
    .inverted .text--display svg,
    .inverted
    .text--display1 svg,
    .inverted .text--display2,
    .inverted .text--display2 svg,
    .inverted .text--display3,
    .inverted .text--display3 svg {
      stroke: transparent;
      fill: white; }

.text--display,
.text--display1 {
  font-size: 34px;
  line-height: 1.25; }
  @media only screen and (min-width: 640px) {
    .text--display,
    .text--display1 {
      font-size: 42px; } }

.text--display2 {
  font-size: 34px;
  line-height: 1.25; }

.text--display3 {
  font-size: 28px;
  line-height: 1.25; }

.text--labelSecondary, .text--label {
  color: rgba(0, 0, 0, 0.87);
  font-size: 13px;
  font-weight: 600;
  line-height: 1.6;
  letter-spacing: -0.02em;
  word-spacing: 0.1em; }
  .text--labelSecondary, .text--label, .text--labelSecondary svg, .text--label svg {
    stroke: transparent;
    fill: rgba(0, 0, 0, 0.87); }
  .inverted .text--labelSecondary, .inverted .text--label {
    color: white; }
    .inverted .text--labelSecondary, .inverted .text--label,
    .inverted .text--labelSecondary svg,
    .inverted .text--label svg {
      stroke: transparent;
      fill: white; }
  .lang_en .text--labelSecondary, .lang_en .text--label {
    text-transform: uppercase; }

.text--labelSecondary {
  color: rgba(0, 0, 0, 0.54);
  font-weight: 500; }
  .text--labelSecondary, .text--labelSecondary svg {
    stroke: transparent;
    fill: rgba(0, 0, 0, 0.54); }
  .inverted .text--labelSecondary {
    color: rgba(255, 255, 255, 0.7); }
    .inverted .text--labelSecondary,
    .inverted .text--labelSecondary svg {
      stroke: transparent;
      fill: rgba(255, 255, 255, 0.7); }

.text--bold {
  font-weight: 500 !important; }
  .text--bold .inverted .runningText, .text--bold .inverted.runningText {
    font-weight: 600 !important; }

.view-head h1, .text--heavy {
  font-weight: 600 !important; }

.text--caption, .text--secondary {
  color: rgba(0, 0, 0, 0.54); }
  .text--caption, .text--secondary, .text--caption svg, .text--secondary svg {
    stroke: transparent;
    fill: rgba(0, 0, 0, 0.54); }
  .inverted .text--caption, .inverted .text--secondary {
    color: rgba(255, 255, 255, 0.7); }
    .inverted .text--caption, .inverted .text--secondary,
    .inverted .text--caption svg,
    .inverted .text--secondary svg {
      stroke: transparent;
      fill: rgba(255, 255, 255, 0.7); }

.text--hint, .text--tertiary {
  color: rgba(0, 0, 0, 0.26); }
  .text--hint, .text--tertiary, .text--hint svg, .text--tertiary svg {
    stroke: transparent;
    fill: rgba(0, 0, 0, 0.26); }
  .inverted .text--hint, .inverted .text--tertiary {
    color: rgba(255, 255, 255, 0.3); }
    .inverted .text--hint, .inverted .text--tertiary,
    .inverted .text--hint svg,
    .inverted .text--tertiary svg {
      stroke: transparent;
      fill: rgba(255, 255, 255, 0.3); }

big,
.text--big {
  font-size: 20px;
  line-height: 1.25;
  font-weight: 500;
  letter-spacing: -0.02em; }

.text--caption, small,
.text--small {
  font-size: 13px;
  line-height: 1.6; }

a.link,
.runningText a {
  color: #1f24cc; }
  a.link,
  .runningText a, a.link svg,
  .runningText a svg {
    stroke: transparent;
    fill: #1f24cc; }
  a.link:hover,
  .runningText a:hover, a.link:focus,
  .runningText a:focus, a.link:active,
  .runningText a:active {
    text-decoration: underline; }
  a.link .button,
  .runningText a .button {
    text-decoration: none; }
  .inverted a.link, .inverted
  .runningText a,
  .runningText .inverted a {
    color: #4dd1ed; }
    .inverted a.link, .inverted
    .runningText a,
    .runningText .inverted a,
    .inverted a.link svg,
    .inverted
    .runningText a svg,
    .runningText
    .inverted a svg {
      stroke: transparent;
      fill: #4dd1ed; }

.text--error,
.text--attention {
  color: #ff911a; }
  .text--error,
  .text--attention, .text--error svg,
  .text--attention svg {
    stroke: transparent;
    fill: #ff911a; }

code,
pre,
.text--mono, .enableDebug .debug {
  font-family: Monaco, "Andale Mono", "Courier New", monospace; }

.runningText p,
.text--wrapNice {
  -webkit-hyphens: auto;
  -ms-hyphens: auto;
  hyphens: auto;
  -ms-hyphenate-limit-chars: 5 3 2;
  -webkit-hyphenate-limit-after: 2;
  hyphenate-limit-after: 2;
  -webkit-hyphenate-limit-before: 3;
  hyphenate-limit-before: 3;
  -webkit-hyphenate-limit-lines: 2;
  -ms-hyphenate-limit-lines: 2;
  hyphenate-limit-lines: 2; }

html {
  overflow-y: scroll;
  font-size: 100%;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  text-rendering: optimizeLegibility;
  color: rgba(0, 0, 0, 0.87); }

html, body {
  margin: 0;
  padding: 0;
  background-color: #fff; }

body {
  position: relative; }

abbr, strong, acronym, span, small, time, strike, sub, sup, a {
  display: inline; }

abbr, acronym {
  border-width: 0; }

b, strong {
  font-weight: 500; }
  .inverted b, .inverted strong {
    font-weight: 600; }

sup, sub {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

p, ul, ol, blockquote,
form, fieldset, legend,
table, dl, dd,
article, aside, details, figcaption, figure, footer, header, hgroup, nav, section {
  display: block;
  margin: 0;
  padding: 0; }

form, legend {
  margin-bottom: 0; }

img {
  display: block;
  margin: 0;
  padding: 0;
  border: 0;
  line-height: 0; }
  img.resample {
    /* assuming we're sizing an img down on the client */
    -ms-interpolation-mode: bicubic;
    image-rendering: optimizeQuality; }

li {
  margin: 0;
  padding: 0; }

article, aside, details, figcaption, figure, footer, header, hgroup, nav, section {
  display: block; }

audio, canvas, video {
  display: inline-block; }

/*doc
---
title: Default table styles
name: tableDefault
category: Tables
---

```html_example
<table>
	<thead>
		<tr>
			<th>State</th>
			<th>Number of escalators</th>
			<th>State bird</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<th>New York</th>
			<td>7,674</td>
			<td>Cardinal</td>
		</tr>
		<tr>
			<th>Wyoming</th>
			<td>2</td>
			<td>Cardinal</td>
		</tr>
		<tr>
			<th>Oregon</th>
			<td>400</td>
			<td>Cardinal</td>
		</tr>
		<tr>
			<th>Florida</th>
			<td>n/a</td>
			<td>Cardinal</td>
		</tr>
	</tbody>
</table>
```
*/
table {
  display: table;
  width: 100%;
  border-collapse: collapse;
  table-layout: auto; }

caption,
td,
th {
  padding: 8px 16px;
  text-align: left;
  vertical-align: middle;
  color: rgba(0, 0, 0, 0.54); }
  .inverted caption, .inverted
  td, .inverted
  th {
    color: rgba(255, 255, 255, 0.7); }

caption {
  padding-left: 0; }

thead th {
  border-bottom: 1px solid rgba(0, 0, 0, 0.12);
  color: rgba(0, 0, 0, 0.87);
  font-weight: 600; }
  .inverted thead th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.2); }

/*doc
---
title: Bordered table
name: borderedTable
category: Tables
---
Apply the `borderedTable` class to apply borders to table cells.

```html_example
<table class="borderedTable">
	<thead>
		<tr>
			<th>State</th>
			<th>Number of escalators</th>
			<th>State bird</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<th>New York</th>
			<td>7,674</td>
			<td>Cardinal</td>
		</tr>
		<tr>
			<th>Wyoming</th>
			<td>2</td>
			<td>Cardinal</td>
		</tr>
		<tr>
			<th>Oregon</th>
			<td>400</td>
			<td>Cardinal</td>
		</tr>
		<tr>
			<th>Florida</th>
			<td>n/a</td>
			<td>Cardinal</td>
		</tr>
	</tbody>
</table>
```
*/
.borderedTable td, .borderedTable tbody th {
  border-width: 1px 0 0 1px;
  border-style: solid;
  border-color: rgba(0, 0, 0, 0.12); }
  .borderedTable td:last-child, .borderedTable tbody th:last-child {
    border-right: 1px solid rgba(0, 0, 0, 0.12); }
  .inverted .borderedTable td, .inverted .borderedTable tbody th {
    border-color: rgba(255, 255, 255, 0.2); }

.borderedTable thead th {
  border-width: 0; }

.borderedTable tbody tr:last-child td, .borderedTable tbody tr:last-child th {
  border-bottom: 1px solid rgba(0, 0, 0, 0.12); }
  .inverted .borderedTable tbody tr:last-child td, .inverted .borderedTable tbody tr:last-child th {
    border-bottom: 1px solid rgba(255, 255, 255, 0.2); }

/*doc
---
title: Reset table
name: resetTable
category: Tables
---

```html_example
<table class="resetTable">
	<thead>
		<tr>
			<th>State</th>
			<th>Number of escalators</th>
			<th>State bird</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<th>New York</th>
			<td>7,674</td>
			<td>Cardinal</td>
		</tr>
		<tr>
			<th>Wyoming</th>
			<td>2</td>
			<td>Cardinal</td>
		</tr>
		<tr>
			<th>Oregon</th>
			<td>400</td>
			<td>Cardinal</td>
		</tr>
		<tr>
			<th>Florida</th>
			<td>n/a</td>
			<td>Cardinal</td>
		</tr>
	</tbody>
</table>
```
*/
.resetTable caption,
.resetTable tbody,
.resetTable thead,
.resetTable td,
.resetTable th {
  padding: 0;
  font-size: 16px;
  font-weight: normal;
  border-width: 0;
  vertical-align: top;
  color: rgba(0, 0, 0, 0.87); }
  .inverted .resetTable caption, .inverted
  .resetTable tbody, .inverted
  .resetTable thead, .inverted
  .resetTable td, .inverted
  .resetTable th {
    color: white; }

/*doc
---
title: Striped table
name: stripedTable
category: Tables
---
Apply the `stripedTable` class to add a background
stripe to every other row of the table.

```html_example
<table class="stripedTable">
	<thead>
		<tr>
			<th>State</th>
			<th>Number of escalators</th>
			<th>State bird</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<th>New York</th>
			<td>7,674</td>
			<td>Cardinal</td>
		</tr>
		<tr>
			<th>Wyoming</th>
			<td>2</td>
			<td>Cardinal</td>
		</tr>
		<tr>
			<th>Oregon</th>
			<td>400</td>
			<td>Cardinal</td>
		</tr>
		<tr>
			<th>Florida</th>
			<td>n/a</td>
			<td>Cardinal</td>
		</tr>
	</tbody>
</table>
```

*/
.stripedTable tbody tr:nth-child(odd) td,
.stripedTable tbody tr:nth-child(odd) th {
  background-color: #fafafa; }
  .inverted .stripedTable tbody tr:nth-child(odd) td, .inverted
  .stripedTable tbody tr:nth-child(odd) th {
    background-color: rgba(0, 0, 0, 0.26); }

/*doc
---
title: Basic Inputs
name: forms
category: Forms
---

<div style="padding: 8px; background: #FFE533; margin: 8px 0 16px 0;">
The `chunk` and `row` classs used below are for documentation
purposes only and are not provided by `swarm-sassutils`. For layout components,
see <a class="link" style="text-decoration: underline;" href="https://github.com/meetup/meetup-web-components">meetup-web-components</a>
</div>

## Text inputs

```html_example
<div class="chunk">
	<label for="test-textinput" class="required">I'm a label</label>
	<input id="test-textinput" type="text" value="Text input with value" />
</div>

<div class="chunk">
	<label for="test-textinput2">Just another label</label>
	<input id="test-textinput2" type="text" placeholder="Text input with placeholder" />
</div>

<div class="chunk">
	<label for="test-textarea">Here's an area for your text</label>
	<textarea id="test-textarea"></textarea>
</div>

<div class="chunk">
	<label for="test-select">What is this?</label>
	<select id="text-select">
		<option value="One">One</option>
		<option value="Two">Two</option>
		<option value="Three">Three</option>
		<option value="Four">Four</option>
	</select>
</div>

<div class="row">
	<div class="row-item chunk">
		<label for="split1">Favorite number</label>
		<input id="split0" type="number" />
	</div>
	<div class="row-item chunk">
		<label for="split1">Unicorn name</label>
		<input id="split1" type="text" placeholder="ie. Fluffy, Resplendent" />
	</div>
	<div class="row-item chunk">
		<label class="required" for="split2">Unicorn color</label>
		<select id="split2">
			<option value="clear">Transparent</option>
			<option value="green">Toasted clove saffron</option>
			<option value="brown">Midnight brown</option>
			<option value="black">Seabreeze black</option>
		</select>
	</div>
</div>
```

*/

label {
  font-size: 13px;
  font-weight: 600; }
  
  label.required:after {
    content: "*";
    color: #ff911a;
    font-size: 20px;
    line-height: 0;
    margin-left: 4px;
    position: relative;
    top: 3px; }

fieldset {
  border: 0;
  padding: 0;
  margin: 0; }


button,
input,
select,
textarea {
  display: block;
  font-family: inherit;
  font-size: 100%;
  line-height: 1.45; }


input[type="color"], input[type="date"], input[type="datetime"], input[type="datetime-local"], input[type="email"], input[type="month"], input[type="number"], input[type="password"], input[type="search"], input[type="tel"], input[type="text"], input[type="time"], input[type="url"], input[type="week"], textarea,
textarea,
select {
  background-color: #fafafa;
  border-radius: 3px;
  border: 1px solid rgba(0, 0, 0, 0.12);
  box-shadow: none;
  box-sizing: border-box;
  margin: 0 0 4px 0;
  max-width: 100%;
  padding: 8px;
  width: 100%; }
  
  input[type="color"]:focus, input[type="date"]:focus, input[type="datetime"]:focus, input[type="datetime-local"]:focus, input[type="email"]:focus, input[type="month"]:focus, input[type="number"]:focus, input[type="password"]:focus, input[type="search"]:focus, input[type="tel"]:focus, input[type="text"]:focus, input[type="time"]:focus, input[type="url"]:focus, input[type="week"]:focus, textarea:focus,
  textarea:focus,
  select:focus {
    background-color: white;
    border-color: #1f24cc;
    box-shadow: none;
    outline: none; }

input,
select {
  height: 39.2px; }

textarea {
  min-height: 85.6px; }

input::-webkit-input-placeholder,
textarea::-webkit-input-placeholder {
  font-style: normal;
  color: rgba(0, 0, 0, 0.26); }

/*doc
---
title: Checkboxes
name: checkbox
category: Forms
---
A label variant class of `label--switch` is
used for side-by-side inputs and labels.

For radios and checkboxes, we put the `input`
element inside the `label` element.

A class of `checkbox` is __required__ on checkbox
input elements.

```html_example
<label for="check1" class="label--switch chunk">
	<input id="check1" class="checkbox" value="green" type="checkbox" />
	Green
</label>
<label for="check2" class="label--switch chunk">
	<input id="check2" class="checkbox" value="blue" type="checkbox" />
	Blue
</label>
<label for="check3" class="label--switch chunk">
	<input id="check3" class="checkbox" value="blue" type="checkbox" checked />
	Already checked
</label>
```
*/
.checkbox {
  cursor: pointer;
  display: inline-block;
  font-size: 16px;
  height: 16px;
  line-height: 1.45;
  margin: 0 16px 0 0; }
  .ieRoot_lt_IE10 .checkbox {
    top: 8px; }

/*doc
---
title: Radios
name: radio
category: Forms
---
A label variant class of `label--switch` is
used for side-by-side inputs and labels.

For radios and checkboxes, we put the `input`
element inside the `label` element.

A class of `radio` is __required__ on radio input
elements.

```html_example
<label for="radio1" class="label--switch chunk">
	<input id="radio1" class="radio" name="radioExample" value="green" type="radio" />
	Green
</label>
<label for="radio2" class="label--switch chunk">
	<input id="radio2" class="radio" name="radioExample" value="red" type="radio" />
	Red
</label>
```
*/
.radio {
  cursor: pointer;
  display: inline-block;
  font-size: 16px;
  height: 16px;
  line-height: 1;
  line-height: 1.45;
  margin: 0 16px 0 0; }
  .ieRoot_lt_IE10 .radio {
    top: 8px; }

/*doc
---
title: Validation errors
name: formValidation
category: Forms
---
Field errors set explicitly with `field--error`.

Error text is set explicitly with `text--error`.

```html_example
<div class="chunk">
	<label for="test-textinput">First name</label>
	<input class="field--error" id="test-textinput" type="text" value="" />
	<p class="text--error">First name can't be empty</p>
</div>
```

*/
.field--error {
  border-color: #ff911a !important; }
  .field--error:focus {
    border-color: #ff911a !important; }

/*doc
---
title: Headings
name: headings
category: Headings
---
*/
/*doc
---
title: Heading tags
name: headingTags
category: Headings
---
All heading tags are reset to use
`text--heavy` styles by default.

Apply a text class to apply additional
heading styles; for example, `text--display1`.

```html_example
<h1>Heading 1</h1>
<h2>Heading 2</h2>
<h3>Heading 3</h3>
<h4>Heading 4</h4>
<h5>Heading 5</h5>
<h6>Heading 6</h6>
```
*/
h1, h2, h3, h4, h5, h6 {
  font-size: 16px; }

.view-head h1 {
  font-size: 16px; }

/*doc
---
title: Display text
name: displayText
category: Headings
---
Display text is useful for styling headings.

*Use the semantically correct heading level tag*,
then apply a display text class to visually style
the tag as a heading.

```html_example
<h2 class="text--display1">Display text is for headings</h2>
<h2 class="text--display2">Display text is for headings</h2>
<h2 class="text--display3">Display text is for headings</h2>
```
*/
/*doc
---
title: Label header
name: labelHeader
category: Headings
---

```html_example
	<h3 class="text--label">Label for subsection</h3>
	<h3 class="text--labelSecondary">Secondary label for subsection</h3>
```
*/
/*doc
---
title: Body/primary text
name: bodyText
category: Body Text
---

```html_example
<p>This is default body text, inheritied from type styles applied to &lt;body&gt;</p>
```

*/
body {
  color: rgba(0, 0, 0, 0.87);
  font-family: "Graphik Meetup", helvetica, arial, sans-serif;
  font-size: 16px;
  font-weight: 400;
  line-height: 1.45; }

/*doc
---
title: Inverted text
name: invertedText
category: Body Text
---

Apply the `inverted` class to a container with
a dark background color or photo to flip all text
elements to inveted colors.

```html_example
<div style="background: #353E48;" class="inverted">
	<p>This is default body text, inheritied from type styles applied to &lt;body&gt;</p>
</div>
```
*/

.inverted {
  color: white; }
  
  .inverted,
  .inverted svg {
    stroke: transparent;
    fill: white; }

/*doc
---
title: Hint text
name: hintText
category: Body Text
---
```html_example
<p class="text--hint">This is hint text</p>
```
*/
/*doc
---
title: Secondary text
name: secondaryText
category: Body Text
---
```html_example
<p class="text--secondary">Secondary text is secondary</p>
```
*/
/*doc
---
title: Tertiary text
name: tertiaryText
category: Body Text
---
```html_example
<p class="text--tertiary">Tertiary text is tertiary</p>
```
*/
/*doc
---
title: Heavy text
name: heavyText
category: Body Text
---
```html_example
<p class="text--heavy">Heavy text is heavy</p>
```
*/
/*doc
---
title: Bold text
name: boldText
category: Body Text
---
```html_example
<p class="text--bold">Bold text is bold</p>
```
*/
/*doc
---
title: Small text
name: smallText
category: Body Text
---
```html_example
<p class="text--small">Small text class is small</p>
<small>Default styling of "small" tag</small>
```
*/
/*doc
---
title: Big text
name: bigText
category: Body Text
---
```html_example
<p class="text--big">Big text class is big</p>
<big>Default styling of "big" tag</big>
```
*/
/*doc
---
title: Monospaced text
name: monoText
category: Body Text
---
The `code` and `pre` elements use a monospaced
font by default. To apply monospaced type rules
to any other element, use `text--mono`.

```html_example
<p class="text--mono">Is this code? What is this?</p>
<code>This is code</code>
<pre>We can safely assume a pre tag on Meetup is also code</pre>
```
*/
/*doc
---
title: Caption text
name: captionText
category: Body Text
---
```html_example
<p class="text--caption">I'm captioning all the things</p>
```
*/
/*doc
---
title: Error text
name: errorText
category: Body Text
---
```html_example
<p class="text--error">I'm erroring all the things</p>
<p class="text--attention">Attention!</p>
```
*/
/*doc
---
title: Text colors
name: coloredText
category: Body Text
---
Applies standard text colors. The variant
is the color name: `text--[color]`. All supported
variants are listed below.

These classes set both the `color` and `fill` properties
in order to also set the color of icons inline with text.

**This style is set as `!important`**

```html_example
<section class="stripe stripe--inverted inverted">
	<div class="bounds">
		<ul class="inlineblockList inlineblockList--bulleted chunk text--heavy">
			<li>Normal heavy text</li>
			<li class="text--red">Colorful heavy text</li>
			<li class="text--pink">Colorful heavy text</li>
			<li class="text--yellow">Colorful heavy text</li>
			<li class="text--teal">Colorful heavy text</li>
		</ul>
	</div>
</section>
```
*/

.text--red {
  color: #ed1c40 !important; }
  
  .text--red,
  .text--red svg {
    stroke: transparent;
    fill: #ed1c40 !important; }


.text--pink {
  color: #ff65c4 !important; }
  
  .text--pink,
  .text--pink svg {
    stroke: transparent;
    fill: #ff65c4 !important; }


.text--teal {
  color: #0fd9a3 !important; }
  
  .text--teal,
  .text--teal svg {
    stroke: transparent;
    fill: #0fd9a3 !important; }


.text--yellow {
  color: #ffe600 !important; }
  
  .text--yellow,
  .text--yellow svg {
    stroke: transparent;
    fill: #ffe600 !important; }

/*doc
---
title: Middot text
name: middotText
category: Body Text
---
```html_example
<p class="text--middotRight">I have a right middot</p>
<p class="text--middotLeft">I have a left middot</p>
```
*/
.text--middotRight:after,
.text--middotLeft:before {
  display: inline-block;
  content: "\B7";
  margin: auto 0.5em;
  font-weight: 600; }

/*doc
---
title: Running text
name: runningText
category: Body Text
---
By default, paragraphs and headings are not styled
with any bottom spacing. Links are not blue by default,
as the most common case on Meetup will be block-level
anchors with large touch targets.

However, there will be instaces where you want the blue
links and properly spaced paragraphs of running text (ie.
event descriptions).

```html_example
<p>The robot is partially dressed in waterproof surgical garb.</p>
<p>"Bruce Springsteen" is a terrible name for a <a href="#">cat</a>.</p>

<hr style="margin: 8px;" /> <!-- lol, hr -->

<div class="runningText">
	<p>The robot is partially dressed in waterproof surgical garb.</p>
	<p>"Bruce Springsteen" is a terrible name for a <a href="#">cat</a>.</p>
</div>
```
*/
.runningText p {
  margin-bottom: 16px;
  max-width: 40em; }
  .runningText p:last-child {
    margin-bottom: 0; }

/*doc
---
title: Link color
name: linkColor
category: Body Text
---
You can always force an anchor to apply a
linky blue color by applying the `.link` class.

```html_example
<p>Let's force this <a class="link" href="#">link</a> to be blue</p>
```
*/
a {
  color: inherit;
  text-decoration: none; }

/*doc
---
title: Bulleted lists
name: bulletedList
category: Body Text
---

`<ul>` and `<ol>` element list styles are
reset by default.

```html_example
<ul>
	<li>Eggs</li>
	<li>More Eggs</li>
</ul>
```

List style bullets are applied when list
elements are inside a `.runningText` container.

```html_example
<div class="bounds">
	<h3 class="text--big">Shopping list</h3>
	<div class="runningText">
		<ul>
			<li>Eggs</li>
			<li>More Eggs</li>
		</ul>
	</div>
</div>
```

You may also use the `.bullets` class to apply
numbers/bullets to a list.

```html_example
<div class="bounds">
	<h3 class="text--big">Shopping list</h3>
	<ul class="bullets">
		<li>Eggs</li>
		<li>More Eggs</li>
	</ul>
</div>
```

*/
ul.bullets,
.runningText ul, ol.bullets,
.runningText ol {
  list-style-position: outside;
  padding-left: 1.33em;
  /* indent by default */ }
  @media only screen and (min-width: 1024px) {
    .runningText ul, .runningText ol {
      padding-left: inherit; } }

ul.bullets,
.runningText ul {
  list-style-type: disc; }

ol.bullets,
.runningText ol {
  list-style-type: decimal; }

/*doc
---
title: Debug text
name: debugText
category: Debug
---

Sometimes you just need to dump some text into a document
to debug.

By default, the `debug` element is hidden. Apply the `enableDebug` class
to a parent element to display `debug` elements.

_Setting the `enableDebug` class on `body` for dev only is recommended._

```html_example
<p class="debug">Invisible debug</p>

<div class="enableDebug">
<p class="debug">
	Visible debug [ ChapterProto =>
	chapterId=530569
	parentChapterId=0
	transitionalVenueId=0
	relocatedZip=
	name=Foreign Androids Feel Frustrated
</p>
</div>
```
*/
.debug {
  display: none; }
  .enableDebug .debug {
    display: block;
    padding: 0.25em 0.5em;
    margin-bottom: 16px;
    font-size: 13px;
    color: purple;
    background: pink;
    outline: 1px dotted red;
    white-space: pre-wrap; }
    .enableDebug .debug:before {
      display: inline;
      content: "DEBUG:";
      color: red;
      font-weight: 600;
      padding-right: 0.25em; }

/**
* modifierClasses/all.scss
* -------------------
* defines all modifier classes
*/
/**
* utils/all.scss
* -------------------
* imports all utility partials
* ("silent" Sass only)
*
* *IMPORTANT*
* You do not need to explicitly include this file in your project.
* These utilites are provided by `scss/reset/all.scss`.
*/
/**
* We use a double-stranded
* [modular scale](http://alistapart.com/article/more-meaningful-typography)
* loosely based on a perfect-fifths scale.
*
* ```
* $block   : 48px @ 1:1.5
* $space   : 16px @ 1:1.5
* ```
*/
/**
* "Block" variables contain size values in pixels starting from
* `48px`, moving up the `1:1.5` type scale.
*/
/**
* "Space" variables contain size values in pixels starting from
* `16px`, moving up the `1:1.5` type scale.
*/
/**
* Elements like images, icons, avatars, and illustrations
* can be thought of as "media". The following variables
* set media sizes based on our modular scale:
*/
/*doc
---
title: Programmatic contrast text
name: getPrimaryTextColor
parent: brightness
---
For a given background color, this function returns
a text color value with appropriate contrast.

_returns `color` value_

```
// -> color: $C_textPrimaryInverted; (white text on dark)
color: getPrimaryTextColor(#000);

// -> color: $C_textPrimary; (dark text on white)
color: getPrimaryTextColor(#FFF);
```
*/
.imgFill {
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover; }

.buttonPersonality {
  -webkit-user-select: none;
  -ms-user-select: none;
  user-select: none;
  cursor: pointer;
  text-decoration: none !important; }

ul, ol {
  margin-left: 0;
  padding-left: 0;
  list-style-type: none; }

.text--display,
.text--display1,
.text--display2,
.text--display3 {
  color: rgba(0, 0, 0, 0.87);
  font-weight: 600;
  letter-spacing: -0.02em; }
  .text--display,
  .text--display1, .text--display svg,
  .text--display1 svg,
  .text--display2, .text--display2 svg,
  .text--display3, .text--display3 svg {
    stroke: transparent;
    fill: rgba(0, 0, 0, 0.87); }
  .inverted .text--display, .inverted
  .text--display1,
  .inverted .text--display2,
  .inverted .text--display3 {
    color: white;
    font-weight: 500; }
    .inverted .text--display, .inverted
    .text--display1,
    .inverted .text--display svg,
    .inverted
    .text--display1 svg,
    .inverted .text--display2,
    .inverted .text--display2 svg,
    .inverted .text--display3,
    .inverted .text--display3 svg {
      stroke: transparent;
      fill: white; }

.text--display,
.text--display1 {
  font-size: 34px;
  line-height: 1.25; }
  @media only screen and (min-width: 640px) {
    .text--display,
    .text--display1 {
      font-size: 42px; } }

.text--display2 {
  font-size: 34px;
  line-height: 1.25; }

.text--display3 {
  font-size: 28px;
  line-height: 1.25; }

.text--labelSecondary, .text--label {
  color: rgba(0, 0, 0, 0.87);
  font-size: 13px;
  font-weight: 600;
  line-height: 1.6;
  letter-spacing: -0.02em;
  word-spacing: 0.1em; }
  .text--labelSecondary, .text--label, .text--labelSecondary svg, .text--label svg {
    stroke: transparent;
    fill: rgba(0, 0, 0, 0.87); }
  .inverted .text--labelSecondary, .inverted .text--label {
    color: white; }
    .inverted .text--labelSecondary, .inverted .text--label,
    .inverted .text--labelSecondary svg,
    .inverted .text--label svg {
      stroke: transparent;
      fill: white; }
  .lang_en .text--labelSecondary, .lang_en .text--label {
    text-transform: uppercase; }

.text--labelSecondary {
  color: rgba(0, 0, 0, 0.54);
  font-weight: 500; }
  .text--labelSecondary, .text--labelSecondary svg {
    stroke: transparent;
    fill: rgba(0, 0, 0, 0.54); }
  .inverted .text--labelSecondary {
    color: rgba(255, 255, 255, 0.7); }
    .inverted .text--labelSecondary,
    .inverted .text--labelSecondary svg {
      stroke: transparent;
      fill: rgba(255, 255, 255, 0.7); }

.text--bold {
  font-weight: 500 !important; }
  .text--bold .inverted .runningText, .text--bold .inverted.runningText {
    font-weight: 600 !important; }

.view-head h1, .text--heavy {
  font-weight: 600 !important; }

.text--caption, .text--secondary {
  color: rgba(0, 0, 0, 0.54); }
  .text--caption, .text--secondary, .text--caption svg, .text--secondary svg {
    stroke: transparent;
    fill: rgba(0, 0, 0, 0.54); }
  .inverted .text--caption, .inverted .text--secondary {
    color: rgba(255, 255, 255, 0.7); }
    .inverted .text--caption, .inverted .text--secondary,
    .inverted .text--caption svg,
    .inverted .text--secondary svg {
      stroke: transparent;
      fill: rgba(255, 255, 255, 0.7); }

.text--hint, .text--tertiary {
  color: rgba(0, 0, 0, 0.26); }
  .text--hint, .text--tertiary, .text--hint svg, .text--tertiary svg {
    stroke: transparent;
    fill: rgba(0, 0, 0, 0.26); }
  .inverted .text--hint, .inverted .text--tertiary {
    color: rgba(255, 255, 255, 0.3); }
    .inverted .text--hint, .inverted .text--tertiary,
    .inverted .text--hint svg,
    .inverted .text--tertiary svg {
      stroke: transparent;
      fill: rgba(255, 255, 255, 0.3); }

big,
.text--big {
  font-size: 20px;
  line-height: 1.25;
  font-weight: 500;
  letter-spacing: -0.02em; }

.text--caption, small,
.text--small {
  font-size: 13px;
  line-height: 1.6; }

a.link,
.runningText a {
  color: #1f24cc; }
  a.link,
  .runningText a, a.link svg,
  .runningText a svg {
    stroke: transparent;
    fill: #1f24cc; }
  a.link:hover,
  .runningText a:hover, a.link:focus,
  .runningText a:focus, a.link:active,
  .runningText a:active {
    text-decoration: underline; }
  a.link .button,
  .runningText a .button {
    text-decoration: none; }
  .inverted a.link, .inverted
  .runningText a,
  .runningText .inverted a {
    color: #4dd1ed; }
    .inverted a.link, .inverted
    .runningText a,
    .runningText .inverted a,
    .inverted a.link svg,
    .inverted
    .runningText a svg,
    .runningText
    .inverted a svg {
      stroke: transparent;
      fill: #4dd1ed; }

.text--error,
.text--attention {
  color: #ff911a; }
  .text--error,
  .text--attention, .text--error svg,
  .text--attention svg {
    stroke: transparent;
    fill: #ff911a; }

code,
pre,
.text--mono, .enableDebug .debug {
  font-family: Monaco, "Andale Mono", "Courier New", monospace; }

.runningText p,
.text--wrapNice {
  -webkit-hyphens: auto;
  -ms-hyphens: auto;
  hyphens: auto;
  -ms-hyphenate-limit-chars: 5 3 2;
  -webkit-hyphenate-limit-after: 2;
  hyphenate-limit-after: 2;
  -webkit-hyphenate-limit-before: 3;
  hyphenate-limit-before: 3;
  -webkit-hyphenate-limit-lines: 2;
  -ms-hyphenate-limit-lines: 2;
  hyphenate-limit-lines: 2; }

/*doc
---
title: Alignment
name: alignMod
category: Modifier Classes
---

__Applies `!important` declaration__

## Text alignment
The following classes change the `text-align` of an element.

Class                    | Description
------------------------ | --------------------------------
`.align--left`           | sets `text-align` to `left`
`.align--right`          | sets `text-align` to `right`
`.align--center`         | sets `text-align` to `center`


## Vertical alignment
The following classes adjust vertical centering of element
contents.

For elements displaying as `inline-block` or `table-cell`,
the `vertical-align` property is used.

For flex children, these classes set the `align-self` property
to a value that best matches the `vertical-align` value.

Class                    | Description
------------------------ | --------------------------------
`.valign--baseline`      | vertically centers element to baseline
`.valign--bottom`        | vertically centers element to bottom
`.valign--middle`        | vertically centers element to middle
`.valign--top`           | vertically centers element to top

*/

.align--left {
  -webkit-align-self: left;
  align-self: left;
  -ms-flex-item-align: left;
  text-align: left !important; }


.align--right {
  -webkit-align-self: right;
  align-self: right;
  -ms-flex-item-align: right;
  text-align: right !important; }


.align--center {
  -webkit-align-self: center;
  align-self: center;
  -ms-flex-item-align: center;
  text-align: center !important; }


.valign--baseline {
  -webkit-align-self: baseline;
  align-self: baseline;
  -ms-flex-item-align: baseline;
  vertical-align: baseline !important; }


.valign--bottom {
  -webkit-align-self: flex-end;
  align-self: flex-end;
  -ms-flex-item-align: end;
  vertical-align: bottom !important; }


.valign--middle {
  -webkit-align-self: center;
  align-self: center;
  -ms-flex-item-align: center;
  vertical-align: middle !important; }


.valign--top {
  -webkit-align-self: flex-start;
  align-self: flex-start;
  -ms-flex-item-align: start;
  vertical-align: top !important; }

/**
* Keyframes
* TODO: move these to our animation lib
*/
@-webkit-keyframes bounce-in-subtle {
  0% {
    -webkit-transform: scale(1); }
  35% {
    -webkit-transform: scale(1.15); }
  75% {
    -webkit-transform: scale(1); } }

@keyframes bounce-in-subtle {
  0% {
    -webkit-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1); }
  35% {
    -webkit-transform: scale(1.15);
    -ms-transform: scale(1.15);
    transform: scale(1.15); }
  75% {
    -webkit-transform: scale(1);
    -ms-transform: scale(1);
    transform: scale(1); } }

@-webkit-keyframes spin {
  0% {
    -webkit-transform: rotate(0deg); }
  100% {
    -webkit-transform: rotate(360deg); } }

@keyframes spin {
  0% {
    -webkit-transform: rotate(0deg);
    -ms-transform: rotate(0deg);
    transform: rotate(0deg); }
  100% {
    -webkit-transform: rotate(360deg);
    -ms-transform: rotate(360deg);
    transform: rotate(360deg); } }


.animate--bounceInSubtle,
.animate--spin {
  -webkit-transform-origin: center center;
  -ms-transform-origin: center center;
  transform-origin: center center; }

/*doc
---
title: Animation
name: animMod
category: Modifier Classes
---
Applies keyframes animation to element

Class							  | Description
------------------------- | --------------------------------
`.animate--bounceInSubtle`| Applies bounce-in keyframes animation (plays once)
`.animate--spin`          | Applies 360deg rotation keyframes (infinite)

*/

.animate--bounceInSubtle {
  -webkit-animation: bounce-in-subtle 250ms cubic-bezier(0.175, 0.885, 0.32, 1.275);
  animation: bounce-in-subtle 250ms cubic-bezier(0.175, 0.885, 0.32, 1.275); }


.animate--spin {
  -webkit-animation: spin 0.8s linear;
  animation: spin 0.8s linear;
  -webkit-animation-iteration-count: infinite;
  animation-iteration-count: infinite; }

/*doc
---
title: Aspect ratio helper
name: keepAspect
category: Modifier Classes
---
Maintains a given aspect ratio for flexible media.
Apply to elements with background images.

Class              | Description
------------------ | ------------------------------
`.keepAspect`      | maintains 1:1 aspect ratio when resized
`.keepAspect--16-9`| maintains 16:9 aspect ratio when resized
`.keepAspect--2-1` | maintains 2:1 aspect ratio when resized
`.keepAspect--2-3` | maintains 2:3 aspect ratio when resized
`.keepAspect--3-4` | maintains 3:4 aspect ratio when resized

*/

.keepAspect {
  margin-bottom: 0; }
  
  .keepAspect:before {
    content: '';
    display: block;
    padding-top: 100%; }


.keepAspect--16-9 {
  margin-bottom: 0; }
  
  .keepAspect--16-9:before {
    content: '';
    display: block;
    padding-top: 56.25%; }


.keepAspect--2-1 {
  margin-bottom: 0; }
  
  .keepAspect--2-1:before {
    content: '';
    display: block;
    padding-top: 50%; }


.keepAspect--2-3 {
  margin-bottom: 0; }
  
  .keepAspect--2-3:before {
    content: '';
    display: block;
    padding-top: 150%; }


.keepAspect--3-2 {
  margin-bottom: 0; }
  
  .keepAspect--3-2:before {
    content: '';
    display: block;
    padding-top: 66.66667%; }


.keepAspect--4-3 {
  margin-bottom: 0; }
  
  .keepAspect--4-3:before {
    content: '';
    display: block;
    padding-top: 75%; }

/*doc
---
title: Background
name: backgroundMod
category: Modifier Classes
---
*/
/*doc
---
title: Image Fill
name: imgFillMod
parent: backgroundMod
---
Sets background properties that center
background image, set size to 'cover',
and overflow hidden.

Extends `%imgFill`.

EXAMPLE TK
*/
/*doc
---
title: Borders
name: borderMod
category: Modifier Classes
---
Sets border properties on element

Class                   | Description
----------------------- | --------------------------------
`.border--top`          | sets a standard top border on the element
`.border--right`        | sets a standard right border on the element
`.border--bottom`       | sets a standard bottom border on the element
`.border--left`         | sets a standard left border on the element
`.border--none`         | removes all borders from element
`.bordered`             | sets a standard top border AND top padding
`.focus--none`          | removes user agent focus style
*/

.bordered,
.border--top {
  border-top: 1px solid rgba(0, 0, 0, 0.12); }
  .inverted
  .bordered, .inverted
  .border--top {
    border-top: 1px solid rgba(255, 255, 255, 0.2); }


.border--right {
  border-right: 1px solid rgba(0, 0, 0, 0.12); }
  .inverted
  .border--right {
    border-right: 1px solid rgba(255, 255, 255, 0.2); }


.border--bottom {
  border-bottom: 1px solid rgba(0, 0, 0, 0.12); }
  .inverted
  .border--bottom {
    border-bottom: 1px solid rgba(255, 255, 255, 0.2); }


.border--left {
  border-left: 1px solid rgba(0, 0, 0, 0.12); }
  .inverted
  .border--left {
    border-left: 1px solid rgba(255, 255, 255, 0.2); }


.border--none {
  border-width: 0 !important; }

.focus--none {
  outline: 0; }


.bordered {
  padding-top: 16px; }

/*doc
---
title: Anchors & Buttons
name: buttonPersonalityMod
category: Modifier Classes
---
Applies button-like pointer styles, text-decoration,
and user-select.

```html_example
	<a class="chunk display--block">I'm just an anchor, displayed block</a>
	<a class="buttonPersonality chunk display--block">I behave more like a button (hover over me; try to select this text)</a>
```
*/
/*doc
---
title: Display
name: displayMod
category: Modifier Classes
---
Modifies display property of element

Class                   | Description
----------------------- | --------------------------------
`.display--none`        | sets `display` to `none`
`.display--block`       | sets `display` to `block`
`.display--flex`        | sets `display` to `flex`
`.display--inline`      | sets `display` to `inline`
`.display--inlineBlock` | sets `display` to `inline-block`
`.display--inlineFlex`  | sets `display` to `inline-flex`
*/

.display--none {
  display: none; }


.display--block {
  display: block; }


.display--flex {
  display: flex; }


.display--inline {
  display: inline; }


.display--inlineBlock {
  display: inline-block; }


.display--inlineFlex {
  display: inline-flex; }

/*doc
---
title: Flex Parent
name: flexParentMod
parent: displayMod
---
Sets `display: flex` rules for selected element as well as
orientation rules for `row` or `column`.

Class                   | Description
----------------------- | --------------------------------
`.flexParent--row`      | sets `display` to `flex` with row orientation for children
`.flexParent--column`   | sets `display` to `flex` with column orientation for children
*/

.flexParent--row {
  display: -webkit-box;
  display: -moz-box;
  display: box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: start;
  box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-justify-content: flex-start;
  justify-content: flex-start;
  -ms-flex-pack: start;
  -webkit-box-align: flex;
  box-align: flex;
  -webkit-align-items: flex;
  -ms-align-items: flex;
  align-items: flex;
  -ms-flex-align: flex;
  box-sizing: border-box;
  -webkit-box-orient: horizontal;
  box-orient: horizontal;
  -webkit-box-direction: normal;
  box-direction: normal;
  -webkit-flex-direction: row;
  flex-direction: row;
  -ms-flex-direction: row;
  -webkit-box-lines: single;
  box-lines: single;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap; }
  .ieRoot_lt_IE10
  .flexParent--row {
    display: table;
    table-layout: auto;
    width: 100%; }


.flexParent--column {
  display: -webkit-box;
  display: -moz-box;
  display: box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: start;
  box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-justify-content: flex-start;
  justify-content: flex-start;
  -ms-flex-pack: start;
  -webkit-box-align: flex;
  box-align: flex;
  -webkit-align-items: flex;
  -ms-align-items: flex;
  align-items: flex;
  -ms-flex-align: flex;
  box-sizing: border-box;
  -webkit-box-orient: vertical;
  box-orient: vertical;
  -webkit-box-direction: normal;
  box-direction: normal;
  -webkit-flex-direction: column;
  flex-direction: column;
  -ms-flex-direction: column; }
  .ieRoot_lt_IE10
  .flexParent--column {
    height: 100%; }
  .ieRoot_lt_IE10
  .flexParent--column {
    display: table;
    table-layout: auto;
    width: 100%; }

/*doc
---
title: Float
name: floatMod
category: Modifier Classes
---
Left and right `float`

Class             | Description
----------------- | -----------------------------------------
`.float--left`    | floats selected element left
`.float--right`   | floats selected element right
*/

.float--left {
  float: left; }


.float--right {
  float: right; }

/*doc
---
title: Float
name: clearFix
parent: floatMod
---
Float clearing.

Class             | Description
----------------- | -----------------------------------------
`.clearfix`       | clears `float` property of children

*/
.clearfix:after {
  visibility: hidden;
  display: block;
  font-size: 0;
  content: " ";
  height: 0; }
  .ieRoot_lt_IE10 .clearfix:after {
    zoom: 1; }

/*doc
---
title: Flush
name: flushMod
category: Modifier Classes
---

__Applies `!important` declaration__

The following classes "flush" an element, removing
padding and margin for a given side variant.

Class               | Description
------------------- | ------------------------------------------------------------
`.flush--all`       | removes `padding` and `margin` from all sides of an element
`.flush--top`       | removes `padding` and `margin` from the top side of an element
`.flush--right`     | removes `padding` and `margin` from the right side of an element
`.flush--bottom`    | removes `padding` and `margin` from the bottom side of an element
`.flush--left`      | removes `padding` and `margin` from the left side of an element
*/

.flush--all {
  padding: 0 !important;
  margin: 0 !important; }


.flush--top {
  padding-top: 0 !important;
  margin-top: 0 !important; }


.flush--right {
  padding-right: 0 !important;
  margin-right: 0 !important; }


.flush--left {
  padding-left: 0 !important;
  margin-left: 0 !important; }


.flush--bottom {
  padding-bottom: 0 !important;
  margin-bottom: 0 !important; }

/*doc
---
title: Javascript-conditional modifiers
name: jsMod
category: Modifier Classes
---
Conditionally changes the display property of an element based
javascript availability.

_Assumes a class of `hasJS` is added to the `body` tag with
javascript on page load_

Class                        | Description
---------------------------- | ----------------------------------------------------
`hasJS_display--block`       | Sets `display` property to `block` if user has JS
`hasJS_display--inline`      | Sets `display` property to `inline` if user has JS
`hasJS_display--inlineBlock` | Sets `display` property to `inline-block` if user has JS
`hasJS_display--none`        | Sets `display` property to `none` if user has JS
*/
.hasJS_display--block,
.hasJS_display--inline,
.hasJS_display--inlineBlock,
.hasJS .hasJS_display--none {
  display: none; }

.hasJS .hasJS_display--block {
  display: block; }

.hasJS .hasJS_display--inline {
  display: inline; }

.hasJS .hasJS_display--inlineBlock {
  display: inline-block; }

/*doc
---
title: Media Sizing
name: sizeMod
category: Modifier Classes
---
Classes for applying dimensions to an element.

Class          | Description
-------------- | ----------------------------
`.media--xs`   | Sets `width` to `$media-xs` and height to `auto`
`.media--s`    | Sets `width` to `$media-s` and height to `auto`
`.media--m`    | Sets `width` to `$media-m` and height to `auto`
`.media--l`    | Sets `width` to `$media-l` and height to `auto`
`.media--xl`   | Sets `width` to `$media-xl` and height to `auto`
*/

.media--xs {
  height: auto;
  width: 24px; }


.media--s {
  height: auto;
  width: 36px; }


.media--m {
  height: auto;
  width: 48px; }


.media--l {
  height: auto;
  width: 72px; }


.media--xl {
  height: auto;
  width: 160px; }

/*doc
---
title: Margin/Padding
name: spacingMod
category: Modifier Classes
---
Applies the standard unit of space as margin or padding
to an element.

## Margin

Class                    | Description
------------------------ | --------------------------------
`.margin--top`           | Adds top margin to element
`.margin--right`         | Adds right margin to element
`.margin--bottom`        | Adds bottom margin to element
`.margin--left`          | Adds left margin to element
`.margin--all`           | Adds margin to all sides of element
`.margin--none`          | Sets `margin` to `0`
`.margin--center`        | Sets left and right margin to `auto`


## Margin

Class                    | Description
------------------------ | --------------------------------
`.padding--top`          | Adds top padding to element
`.padding--right`        | Adds right padding to element
`.padding--bottom`       | Adds bottom padding to element
`.padding--left`         | Adds left padding to element
`.padding--all`          | Adds padding to all sides of element
`.padding--none`         | Sets `padding` to `0`

*/

.margin--top {
  margin-top: 16px; }


.margin--right {
  margin-right: 16px; }


.margin--left {
  margin-left: 16px; }


.margin--bottom {
  margin-bottom: 16px; }


.margin--all {
  margin: 16px; }


.margin--none {
  margin: 0; }


.padding--top {
  padding-top: 16px; }


.padding--right {
  padding-right: 16px; }


.padding--left {
  padding-left: 16px; }


.padding--bottom {
  padding-bottom: 16px; }


.padding--all {
  padding: 16px; }


.padding--none {
  padding: 0; }


.margin--center {
  margin-left: auto;
  margin-right: auto; }

/*doc
---
title: Text Modifiers
name: textMod
category: Modifier Classes
---
*/
/*doc
---
title: Hiding Text
name: textHideUtil
parent: textMod
---
To hide just the text node of an element, use
the `text--hide` modifier.

This is useful for links that only contain an
SVG icon (use descriptive text for screen readers).

_(this class will not work on `inline` elements)_

```html_example
<a class="display--block text--hide" href="#">
	You can see the kitten, but you can't see this text.
	<img src="https://placekitten.com/g/32/32" />
</a>
```

Class          | Description
-------------- | ----------------------------
`.text--hide`  | Visually hides text; removes text from document flow
*/

.text--hide {
  display: block;
  width: 0;
  height: 0;
  font-size: 0;
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden; }

/*doc
---
title: Text decoration/transform
name: textDecoration
parent: textMod
---
Basic text decoration and transform

Class                  | Description
---------------------- | ----------------------------
`.text--strikethrough` | strikethrough/strikeout/line-through
`.text--uppercase`     | uppercase text (limited to English)
*/

.text--strikethrough {
  text-decoration: line-through; }

.lang_en
.text--uppercase {
  text-transform: uppercase; }

/*doc
---
title: No Hyphens
name: textNoHyphens
parent: textMod
---
Don't allow hyphens on line breaks

Class              | Description
-------------------| ----------------------------
`.text--noHyphens` | Don't allow hyphens on line breaks
*/

.text--noHyphens {
  -webkit-hyphens: none;
  -ms-hyphens: none;
  hyphens: none; }

/*doc
---
title: Nice Hyphenation
name: wrapNiceUtil
parent: textMod
---
Enables breaking all words and auto-hyphenation.

Class              | Description
------------------ | ----------------------------
`.text--wrapNice`  | Auto hyphenation and nice wrapping for running text
*/
/*doc
---
title: Type wrap/whitespace
name: typespaceMod
parent: textMod
---
Sets type wrapping, witespace, and overflow properties on element

Class                         | Description
----------------------------- | --------------------------------
`.wrap--singleLine`           | forces text to a single line (nowrap)
`.wrap--singleLine--truncate` | forces text to a single line (nowrap) and truncates with &hellip;
`.matchLineHeight`            | adds a small amount of top and bottom margin to a non-text element to match line height of nearby text

*/

.wrap--singleLine--truncate,
.wrap--singleLine {
  white-space: nowrap !important; }


.wrap--singleLine--truncate {
  overflow: hidden !important;
  text-overflow: ellipsis !important; }


.matchLineHeight {
  margin: 3px 0; }

/*doc
---
title: Thumbnails
name: thumb
category: Modifier Classes
---
Sets background cover and position for photo thumbnails.

```html_example
<div class="thumb media--l" style="background-image: url(http://photos4.meetupstatic.com/photos/member/d/0/2/c/member_156833292.jpeg);"></div>
```

*/

.thumb {
  background-position: center;
  background-size: cover;
  background-color: #757575;
  display: block;
  position: relative; }
  
  .thumb:before {
    content: '';
    display: block;
    padding-top: 100%; }

/*doc
---
title: Visibility
name: visibilityMod
category: Modifier Classes
---
Modifies `visibility` property of an element __or__
in the case of `a11y` classes, visually hides an element
that will [not be ignored by screen readers](http://a11yproject.com/posts/how-to-hide-content/).

Class                    | Description
------------------------ | --------------------------------
`.visibility--a11yHide`  | takes element out of document flow and hides it (screen readers will NOT ignore the element)
`.visibility--a11yShow`  | reveals a a11y hidden element for sighted users
*/

.visibility--a11yHide {
  border: 0;
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px; }


.visibility--a11yShow {
  clip: initial;
  position: static;
  overflow: visible;
  margin: 0;
  width: auto;
  height: auto; }

/*doc
---
title: Width
name: widthModifier
category: Modifier Classes
---
Sets element width in percentage.

**Includes `!important` directive** in order to override
input attribute selectors.

`span--[width%]`

```html_example
<p class="span--100" style="background: pink;">100% width</p>
<p class="span--80" style="background: pink;">80% width</p>
<p class="span--75" style="background: pink;">75% width</p>
<p class="span--60" style="background: pink;">60% width</p>
<p class="span--50" style="background: pink;">50% width</p>
<p class="span--30" style="background: pink;">30% width</p>
<p class="span--25" style="background: pink;">25% width</p>
```
*/

.span--100 {
  width: 100% !important; }


.span--80 {
  width: 80% !important; }


.span--75 {
  width: 75% !important; }


.span--60 {
  width: 60% !important; }


.span--50 {
  width: 50% !important; }


.span--30 {
  width: 30% !important; }


.span--25 {
  width: 25% !important; }

/*doc
---
title: Media-conditional modifiers
name: mediaMod
category: Modifier Classes
---

Media-conditional modifiers allow us to apply
a modification at a specific breakpoint.

_Uses atMediaUp_

### Example

```html_example
	<p class="atLarge_align--center">
		This text inherits the default left alignment by default, but at `large` viewports and up, the text should center
	</p>
```

### Supported modifications
Using this signature: `.at[Breakpoint]_[property]--[variant]`

Breakpoints        | Property       | Variants
------------------ | -------------- | ---------------------------
`medium`, `large`  | `align`        | `center`, `right`, `left`
`medium`, `large`  | `display`      | `none`, `block`, `flex`, `inline`, `inlineBlock`, `inlineFlex`
`medium`, `large`  | `padding`      | `top`, `right`, `bottom`, `left`, `none`
`medium`, `large`  | `margin`       | `center`
`medium`, `large`  | `border`       | `top`, `none`
`medium`, `large`  | `visibility`   | `a11yHide`, `a11yShow`
`medium`, `large`  | `width`        | `auto`, `full`
*/
@media only screen and (min-width: 440px) {
  .atSmall_align--center {
    text-align: center !important; } }

@media only screen and (min-width: 640px) {
  .atMedium_align--center {
    text-align: center !important; } }

@media only screen and (min-width: 840px) {
  .atLarge_align--center {
    text-align: center !important; } }

@media only screen and (min-width: 440px) {
  .atSmall_align--right {
    text-align: right !important; } }

@media only screen and (min-width: 640px) {
  .atMedium_align--right {
    text-align: right !important; } }

@media only screen and (min-width: 840px) {
  .atLarge_align--right {
    text-align: right !important; } }

@media only screen and (min-width: 440px) {
  .atSmall_align--left {
    text-align: left !important; } }

@media only screen and (min-width: 640px) {
  .atMedium_align--left {
    text-align: left !important; } }

@media only screen and (min-width: 840px) {
  .atLarge_align--left {
    text-align: left !important; } }

@media only screen and (min-width: 440px) {
  .atSmall_display--none {
    display: none !important; } }

@media only screen and (min-width: 640px) {
  .atMedium_display--none {
    display: none !important; } }

@media only screen and (min-width: 840px) {
  .atLarge_display--none {
    display: none !important; } }

@media only screen and (min-width: 440px) {
  .atSmall_display--block {
    display: block !important; } }

@media only screen and (min-width: 640px) {
  .atMedium_display--block {
    display: block !important; } }

@media only screen and (min-width: 840px) {
  .atLarge_display--block {
    display: block !important; } }

@media only screen and (min-width: 440px) {
  .atSmall_display--flex {
    display: flex !important; } }

@media only screen and (min-width: 640px) {
  .atMedium_display--flex {
    display: flex !important; } }

@media only screen and (min-width: 840px) {
  .atLarge_display--flex {
    display: flex !important; } }

@media only screen and (min-width: 440px) {
  .atSmall_display--inline {
    display: inline !important; } }

@media only screen and (min-width: 640px) {
  .atMedium_display--inline {
    display: inline !important; } }

@media only screen and (min-width: 840px) {
  .atLarge_display--inline {
    display: inline !important; } }

@media only screen and (min-width: 440px) {
  .atSmall_display--inlineBlock {
    display: inline-block !important; } }

@media only screen and (min-width: 640px) {
  .atMedium_display--inlineBlock {
    display: inline-block !important; } }

@media only screen and (min-width: 840px) {
  .atLarge_display--inlineBlock {
    display: inline-block !important; } }

@media only screen and (min-width: 440px) {
  .atSmall_display--inlineFlex {
    display: inline-flex !important; } }

@media only screen and (min-width: 640px) {
  .atMedium_display--inlineFlex {
    display: inline-flex !important; } }

@media only screen and (min-width: 840px) {
  .atLarge_display--inlineFlex {
    display: inline-flex !important; } }

@media only screen and (min-width: 440px) {
  .atSmall_visibility--a11yHide {
    border: 0;
    clip: rect(0 0 0 0);
    position: absolute;
    overflow: hidden;
    margin: -1px;
    padding: 0;
    width: 1px;
    height: 1px; } }

@media only screen and (min-width: 640px) {
  .atMedium_visibility--a11yHide {
    border: 0;
    clip: rect(0 0 0 0);
    position: absolute;
    overflow: hidden;
    margin: -1px;
    padding: 0;
    width: 1px;
    height: 1px; } }

@media only screen and (min-width: 840px) {
  .atLarge_visibility--a11yHide {
    border: 0;
    clip: rect(0 0 0 0);
    position: absolute;
    overflow: hidden;
    margin: -1px;
    padding: 0;
    width: 1px;
    height: 1px; } }

@media only screen and (min-width: 440px) {
  .atSmall_visibility--a11yShow {
    clip: initial;
    position: static;
    overflow: visible;
    margin: 0;
    width: auto;
    height: auto; } }

@media only screen and (min-width: 640px) {
  .atMedium_visibility--a11yShow {
    clip: initial;
    position: static;
    overflow: visible;
    margin: 0;
    width: auto;
    height: auto; } }

@media only screen and (min-width: 840px) {
  .atLarge_visibility--a11yShow {
    clip: initial;
    position: static;
    overflow: visible;
    margin: 0;
    width: auto;
    height: auto; } }

@media only screen and (min-width: 440px) {
  .atSmall_width--auto {
    width: auto !important; } }

@media only screen and (min-width: 640px) {
  .atMedium_width--auto {
    width: auto !important; } }

@media only screen and (min-width: 840px) {
  .atLarge_width--auto {
    width: auto !important; } }

@media only screen and (min-width: 440px) {
  .atSmall_width--full {
    width: 100% !important; } }

@media only screen and (min-width: 640px) {
  .atMedium_width--full {
    width: 100% !important; } }

@media only screen and (min-width: 840px) {
  .atLarge_width--full {
    width: 100% !important; } }

@media only screen and (min-width: 440px) {
  .atSmall_padding--top {
    padding-top: 16px; } }

@media only screen and (min-width: 640px) {
  .atMedium_padding--top {
    padding-top: 16px; } }

@media only screen and (min-width: 840px) {
  .atLarge_padding--top {
    padding-top: 16px; } }

@media only screen and (min-width: 440px) {
  .atSmall_padding--right {
    padding-right: 16px; } }

@media only screen and (min-width: 640px) {
  .atMedium_padding--right {
    padding-right: 16px; } }

@media only screen and (min-width: 840px) {
  .atLarge_padding--right {
    padding-right: 16px; } }

@media only screen and (min-width: 440px) {
  .atSmall_padding--bottom {
    padding-bottom: 16px; } }

@media only screen and (min-width: 640px) {
  .atMedium_padding--bottom {
    padding-bottom: 16px; } }

@media only screen and (min-width: 840px) {
  .atLarge_padding--bottom {
    padding-bottom: 16px; } }

@media only screen and (min-width: 440px) {
  .atSmall_padding--left {
    padding-left: 16px; } }

@media only screen and (min-width: 640px) {
  .atMedium_padding--left {
    padding-left: 16px; } }

@media only screen and (min-width: 840px) {
  .atLarge_padding--left {
    padding-left: 16px; } }

@media only screen and (min-width: 440px) {
  .atSmall_padding--none {
    padding: 0 !important; } }

@media only screen and (min-width: 640px) {
  .atMedium_padding--none {
    padding: 0 !important; } }

@media only screen and (min-width: 840px) {
  .atLarge_padding--none {
    padding: 0 !important; } }

@media only screen and (min-width: 440px) {
  .atSmall_margin--center {
    margin-left: auto;
    margin-right: auto; } }

@media only screen and (min-width: 640px) {
  .atMedium_margin--center {
    margin-left: auto;
    margin-right: auto; } }

@media only screen and (min-width: 840px) {
  .atLarge_margin--center {
    margin-left: auto;
    margin-right: auto; } }

@media only screen and (min-width: 440px) {
  .atSmall_border--top {
    border-top: 1px solid rgba(0, 0, 0, 0.12); }
    .inverted .atSmall_border--top {
      border-top: 1px solid rgba(255, 255, 255, 0.2); } }

@media only screen and (min-width: 640px) {
  .atMedium_border--top {
    border-top: 1px solid rgba(0, 0, 0, 0.12); }
    .inverted .atMedium_border--top {
      border-top: 1px solid rgba(255, 255, 255, 0.2); } }

@media only screen and (min-width: 840px) {
  .atLarge_border--top {
    border-top: 1px solid rgba(0, 0, 0, 0.12); }
    .inverted .atLarge_border--top {
      border-top: 1px solid rgba(255, 255, 255, 0.2); } }

@media only screen and (min-width: 440px) {
  .atSmall_border--none {
    border-width: 0 !important; } }

@media only screen and (min-width: 640px) {
  .atMedium_border--none {
    border-width: 0 !important; } }

@media only screen and (min-width: 840px) {
  .atLarge_border--none {
    border-width: 0 !important; } }
