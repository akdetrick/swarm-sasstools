////
/// @group Responsive Variables
////

/// Assumes `small` or `default` values passed in as
/// $breakpoint should not be wrapped in an `atMediaUp` media query
/// @access private
/// @content [Style rules]
@mixin _atMediaUpForVarContext($breakpoint) {
	@if ($breakpoint == small) or ($breakpoint == default) {
		@content
	} @else {
		@include atMediaUp($breakpoint){
			@content;
		}
	}
}

/// responsive var map for `$base`
/// configures value for `$base` at each breakpoint
///
/// @prop {Value(px)} responsiveVarMap--base.small [16px]
/// @prop {Value(px)} responsiveVarMap--base.medium [18px]
/// @prop {Value(px)} responsiveVarMap--base.large [20px]
$responsiveVarMap--base: (
	small:	16px,
	medium:	18px,
	large:	20px
);

/// Creates a Sass context in which the `$base` variable is rendered
/// with different values for each `breakpoint` in `$responsiveVarMap--base`.
///
/// <div style="padding: 8px; background: rgba(255, 229, 51, 0.6); margin: 8px 0 16px 0;">
/// To avoid generating large chunks of CSS multiple times, this mixin
/// should only surround properties with responsive vars (see example below)
/// </div>
///
/// @see $responsiveVarMap--base
/// @content [Renders CSS with media queries to set value of `$base` for given breakpoints in `$responsiveVarMap--base`]
///
/// @example scss - setting padding that scales at breakpoints
/// 	.someCoolImage {
/// 		background: pink;
/// 		@include responsiveVarContext--base() {
/// 			padding: $base; /* this property will be generated with a different value for each `base` breakpoint */
///      }
/// 	}
@mixin responsiveVarContext--base() {
	@each $breakpoint, $val in $responsiveVarMap--base {
		// until @content accepts arguments, we have to use a temporary global variable
		// https://github.com/sass/sass/issues/871
		// http://stackoverflow.com/questions/29596968/passing-arguments-from-a-mixin-to-a-content-block
		$base: null !default;
		$old: $base;
		$base: $val !global;
		@include _atMediaUpForVarContext($breakpoint) {
			@content
		}
		$base: $old !global;
	}
}

/// Creates a Sass context in which the `$base` variable is rendered
/// with different values for each `breakpoint` in `$responsiveVarMap--base`.
///
/// <div style="padding: 8px; background: rgba(255, 229, 51, 0.6); margin: 8px 0 16px 0;">
/// To avoid generating large chunks of CSS multiple times, this mixin
/// should only surround properties with responsive vars (see example below)
/// </div>
///
/// @see $responsiveVarMap--base
/// @content [Renders CSS with media queries to set value of `$base` for given breakpoints in `$responsiveVarMap--base`]
///
/// @example scss - setting padding that scales at breakpoints
/// 	.someCoolImage {
/// 		background: pink;
/// 		@include responsiveVarContext--base() {
/// 			padding: $base; /* this property will be generated with a different value for each `base` breakpoint */
///      }
/// 	}

/// configures scale factor value for `$scalingMedia-{sizeName}` at each breakpoint
///
/// @prop {Value(px)} responsiveScaleMap.small [1]
/// @prop {Value(px)} responsiveScaleMap.medium [1.125]
/// @prop {Value(px)} responsiveScaleMap.large [1.25]
$responsiveScaleMap: (
	small:	1,
	medium:	1.125,
	large:	1.25
);

/// Creates a Sass context in which the `$scalingMedia-{sizeName}` variables
/// are rendered with different values for each `breakpoint` in `$responsiveScaleMap`.
///
/// <div style="padding: 8px; background: rgba(255, 229, 51, 0.6); margin: 8px 0 16px 0;">
/// To avoid generating large chunks of CSS multiple times, this mixin
/// should only surround properties with responsive vars (see example below)
/// </div>
///
/// @see $responsiveVarMap--scalingMedia
/// @content [Renders CSS with media queries to set value of `$scalingMedia-m` for given breakpoints in `$responsiveScaleMap`]
///
/// @example scss - setting padding that scales at breakpoints
/// 	.someCoolImage {
/// 		background: pink;
/// 		height: auto;
/// 		@include responsiveVarContext--scalingMedia() {
/// 			width: $scalingMedia-m; /* this property will be generated with a different value for each breakpoint */
///      }
/// 	}
@mixin responsiveVarContext--scalingMedia() {

	@each $breakpoint, $scaleVal in $responsiveScaleMap {
		// until @content accepts arguments, we have to use a temporary global variable
		// https://github.com/sass/sass/issues/871
		// http://stackoverflow.com/questions/29596968/passing-arguments-from-a-mixin-to-a-content-block
		$scalingMedia-xs: null !default;
		$oldScalingMedia-xs: $scalingMedia-xs;
		$scalingMedia-xs: floor(map-get($media-map, xs) * $scaleVal) !global;

		$scalingMedia-s: null !default;
		$oldScalingMedia-s: $scalingMedia-s;
		$scalingMedia-s: floor(map-get($media-map, s) * $scaleVal) !global;

		$scalingMedia-m: null !default;
		$oldScalingMedia-m: $scalingMedia-m;
		$scalingMedia-m: floor(map-get($media-map, m) * $scaleVal) !global;

		$scalingMedia-l: null !default;
		$oldScalingMedia-l: $scalingMedia-l;
		$scalingMedia-l: floor(map-get($media-map, l) * $scaleVal) !global;

		$scalingMedia-xl: null !default;
		$oldScalingMedia-xl: $scalingMedia-xl;
		$scalingMedia-xl: floor(map-get($media-map, xl) * $scaleVal) !global;

		$scalingMedia-xxl: null !default;
		$oldScalingMedia-xxl: $scalingMedia-xxl;
		$scalingMedia-xxl: floor(map-get($media-map, xxl) * $scaleVal) !global;

		@include _atMediaUpForVarContext($breakpoint) {
			@content
		}

		$scalingMedia-xs: $oldScalingMedia-xs !global;
		$scalingMedia-s: $oldScalingMedia-s !global;
		$scalingMedia-m: $oldScalingMedia-m !global;
		$scalingMedia-l: $oldScalingMedia-l !global;
		$scalingMedia-xl: $oldScalingMedia-xl !global;
		$scalingMedia-xxl: $oldScalingMedia-xxl !global;

	}

}
