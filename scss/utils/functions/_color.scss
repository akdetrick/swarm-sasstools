@import "~swarm-constants/dist/scss/vars";

////
/// @group color
/// @access public
////

// Gets a list of colors along a gradient with a
// specified base color and number of color steps
//
/// @param {color} $baseColor - keyword, hex, rgba, rgb, or hsl color
/// @param {Number} $numColors - number of color steps to return
/// @param {Degrees} $spectrum [-90deg] - hue spectrum to cover in gradient
///
/// @returns {List} Sass list of color values for gradient
///
/// @example scss
/// 	@each $color in getGradientList('blue', 12) {
/// 		// $color = step in a 12 step gradient from 'blue'
/// 	}
///
@function getGradientList( $baseColor, $numColors, $spectrum: -90deg) {
	$colorList: ();

	@for $n from 1 through $numColors {
		$hueAdjust: $spectrum/$numColors*$n;
		$color: adjust-hue($baseColor, $hueAdjust);
		$colorList: append($colorList, $color);
	}

	@return $colorList;
}

// Takes an RGBA base color and a background color
// and returns it's opaque equivalent as HEX.
//
/// @param {color} $rgba - rgba color
/// @param {color} $bgColor - the background color used to calculate opaque color
///
/// @returns {color} Opaque HEX color
///
/// @example scss
///		.example {
///			background-color: rgba-to-hex($C_textHint, $C_white);
///		}
///
@function rgba-to-hex($rgba, $bgColor: $C_white){
	@if $bgColor != $C_contentBG {
		$bgColor: $bgColor;
	}

	$alphaPercent: alpha($rgba) * 100;
	$bgColorAsHex: opacify($rgba, 1);
	$hex: mix($bgColorAsHex, $bgColor, $alphaPercent);

	@return $hex;
}
// end rgba-to-hex fn
